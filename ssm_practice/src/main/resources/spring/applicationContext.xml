<?xml version="1.0" encoding="UTF-8"?><beans xmlns="http://www.springframework.org/schema/beans"       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"       xmlns:context="http://www.springframework.org/schema/context"       xmlns:aop="http://www.springframework.org/schema/aop"       xmlns:tx="http://www.springframework.org/schema/tx"       xsi:schemaLocation="http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">    <!-- 包扫描(除controller以外的beans) 不需要设置:use-default-filters="false"         因为依然使用default-filter, 只是排除了controller         如果是 include-filter, 需要设置use-default-filters="false"     -->    <context:component-scan base-package="top.gn.ssm">        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>    </context:component-scan>    <!-- 引入外部properties文件 -->    <context:property-placeholder location="classpath:db-config.properties"/>    <!-- 配置数据库连接池 -->    <bean id="pooledDataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">        <property name="jdbcUrl" value="${jdbc.url}"/>        <property name="driverClass" value="${jdbc.driver}" />        <property name="user" value="${jdbc.user}"/>        <property name="password" value="${jdbc.password}"/>    </bean>    <!-- 配置mybatis和spring的整合 -->    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">        <!-- 指定mybatis全局配置文件的位置 -->        <property name="configLocation" value="classpath:mybatis-config.xml"></property>        <property name="dataSource" ref="pooledDataSource"></property>        <!-- 指定mybatis，mapper文件的位置 -->        <property name="mapperLocations" value="classpath:mapper/*.xml"></property>    </bean>    <!-- 配置mybatis接口的实现 -->    <bean id="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">        <!-- 扫描所有dao接口 , 添加到IOC当中 -->        <property name="basePackage" value="top.gn.ssm.dao"/>    </bean>    <!--    较新的方式    <mybatis-spring:scan base-package="top.gn.ssm.dao"></mybatis-spring:scan>    -->    <!-- 配置批量插入的SqlSession -->    <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">        <constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory"></constructor-arg>        <constructor-arg name="executorType" value="BATCH"></constructor-arg>    </bean>    <!-- spring的事务管理 -->    <bean id="dataSourceTransactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">        <property name="dataSource" ref="pooledDataSource"/>    </bean>    <!-- 开启基于注解的事务管理(aop) , 使用时在方法上加入@Transactional-->    <tx:annotation-driven transaction-manager="dataSourceTransactionManager"/>    <!-- aop logger exception -->    <!--    <aop:aspectj-autoproxy /> : 基于注解的aop    -->    <!--<bean id="controllerAop" class="top.gn.ssm.aop.ControllerExceptionAop"/>-->    <!--<aop:config>-->        <!--<aop:aspect ref="controllerAop">-->            <!--<aop:pointcut expression="execution(public top.gn.ssm.service.**(..))" id="targer"></aop:pointcut>-->            <!--<aop:around method="handlerControllerMethod" pointcut-ref="targer"/>-->        <!--</aop:aspect>-->    <!--</aop:config>--></beans>